@model LoanSoftware.Models.LoanModel.BranchLimit

@{
    ViewBag.Title = "Create";
}


<head>
    <style>
        .select2-container--default .select2-selection--single .select2-selection__rendered {
            margin-top: -8px !important;
        }

        .table td {
            padding: .0rem !important; 
            
        }
    </style>
   
</head>


@Html.AntiForgeryToken()


<form id="quickForm">
    <div class="card card-primary card-outline card-outline-tabs">
        <div class="card-body" >

            <div class="row">
                <div class="col-md-4"></div>
                <div class="col-md-4">
                    <div class="card card-info">
                        <div class="card-header">
                            <h3 class="card-title">Branch Limit Add</h3>
                        </div>
                        <div class="form-horizontal">
                            @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                            <div class="form-group">
                                @Html.LabelFor(model => model.BranchCode, "Branch Name", htmlAttributes: new { @class = " col-sm-4 col-form-label" })
                                @*<label class="col-sm-4 col-form-label">Branch Name</label>*@
                                <div class="col-sm-12">
                                    @Html.DropDownListFor(model => model.BranchCode, (IEnumerable<SelectListItem>)ViewBag.branchcode, new { @class = "form-control  select2" })
                                    @Html.ValidationMessageFor(model => model.BranchCode, "", new { @class = "text-danger" })
                                </div>
                            </div>

                            <div class="form-group">
                                @Html.LabelFor(model => model.BrLimit, "Branch Limit", htmlAttributes: new { @class = "col-sm-4 col-form-label" })
                                <div class="col-sm-12">
                                    @Html.EditorFor(model => model.BrLimit, new { htmlAttributes = new { @class = "form-control", @type = "number", @min = "0" } })
                                    @Html.ValidationMessageFor(model => model.BrLimit, "", new { @class = "text-danger" })
                                </div>
                            </div>
                            <div class="form-group row"  style="height:0px;">
                                <div class="col-md-12" style="text-align:center; height:0px;">
                                    <input type="submit" name="save" id="save" value="Save" class="btn btn-primary" />
                                    <input type="submit" id="update" value="Update" class="btn btn-primary" />
                                    <input type="button" name="delete" id="delete" value="Delete" class="btn btn-primary" />
                                    <input type="button" name="refresh" id="refresh" value="Refresh" class="btn btn-primary" />
                                    @*<input type="button" name="print" id="print" value="Print" class="btn skin-blue" />*@
                                <br />
                                </div>
                            </div>
                            <br />
                        </div>
                    </div>

                </div>

            </div>
        </div>
    </div>


    <div class="card">
        <div class="card-header">
            <h3 class="card-title">Branchwise Limit List</h3>
        </div>
        <!-- /.card-header -->
        <div class="card-body">
            <table class="table table-striped table-hover" style="width:100%" id="tbl">
                <thead text-align:center;">
                    <tr>
                        <th>SL</th>
                        <th>
                            Branch Code
                        </th>
                        <th>
                            Branch Name
                        </th>
                        <th>
                            BranchLimit
                        </th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var item in ViewBag.BranchLimitList)
                    {
                        <tr value="@item.LimitID" class="clickable-row">
                            <td>@item.LimitID</td>
                            <td>@item.BranchCode</td>
                            <td>@item.BranchName</td>
                            <td>@item.BrLimit</td>
                        </tr>
                    }
                </tbody>

            </table>
        </div>
    </div>
    <input id="LimitID" value="" hidden />
</form>

@section Scripts{
    @*@Scripts.Render("~/bundles/jqueryval")*@
<script>
    //$.validator.setDefaults({
    //    submitHandler: function () {
    //        alert("Form successful submitted!");
    //    }
    //});
    $('#quickForm').validate({
        rules: {
            BrLimit: {
                required: true
            },
            BranchCode: {
                required: true

            }
        },
        messages: {
            BrLimit: {
                required: "Please Enter Limit"
            },
            BranchCode: {
                required: "Please select Branch"
            }
        },
        errorElement: 'span',
        errorPlacement: function (error, element) {
            error.addClass('invalid-feedback');
            element.closest('.form-group').append(error);
        },
        highlight: function (element, errorClass, validClass) {
            $(element).addClass('is-invalid');
        },
        unhighlight: function (element, errorClass, validClass) {
            $(element).removeClass('is-invalid');
        }
    });
    var isValid = true;
    $("#update").hide();
    $("#delete").hide();
    $('.select2').select2()
    //$("#tbl").DataTable({
    //    "paging": true,
    //    "lengthChange": false,
    //    "searching": true,
    //    "ordering": true,
    //    "info": true,
    //    "autoWidth": false,
    //    "responsive": true,
    //    "buttons": ["copy", "excel", "pdf", "print"]
    //}).buttons().container().appendTo('#tbl_wrapper .col-md-6:eq(0)');

    $("#tbl").DataTable({
        "paging": true,
        "responsive": true, "lengthChange": false, "autoWidth": false,
        "buttons": ["copy", "excel",  "print"]
    }).buttons().container().appendTo('#tbl_wrapper .col-md-6:eq(0)');


    var BranchLimitData = { LimitID: 0, BranchCode: '', BrLimit: 0}


    $(document).on('click', ".clickable-row", function () {

        var LimitID = parseInt($(this).attr("value"));

        $.ajax({
            url: '@Url.Action("SearchByLimitBranchID", "LimitBranch")',
            contentType: "application/json;charset=utf-8",
            data: JSON.stringify({ LimitID }),
            type: 'POST',
            dataType: 'json',
            success: function (datas) {
                if (datas.Message==0)
                {
                    alert("This Designation  doesn't exist.");
                }
                else {
                    $("#save").hide();
                    $("#update").show();
                    $("#delete").show();
                    $("#BranchCode").val(datas.BranchCode).change();
                    $("#BrLimit").val(datas.BrLimit);
                    $("#LimitID").val(datas.LimitID);
                }
            }
        });
    });

    $(document).on('change', "#BranchCode", function () {

        //var brnachCode = $(this).attr("Value");
        var brnachCode = $("#BranchCode").val();


        $.ajax({
            url: '@Url.Action("SearchByBranchCode", "LimitBranch")',
            contentType: "application/json;charset=utf-8",
            data: JSON.stringify({ brnachCode }),
            type: 'POST',
            dataType: 'json',
            success: function (datas) {
                if (datas==null)
                {
                    //$("#BrLimit").val("");
                    //alert("This Designation  doesn't exist.");
                }
                else {
                    $("#save").hide();
                    $("#update").show();
                    $("#delete").show();
                    //$("#BranchCode").val(datas.BranchCode).change();
                    $("#BrLimit").val(datas.BrLimit);
                    $("#LimitID").val(datas.LimitID);
                }
            },
            error: function () {
                $("#BrLimit").val("");
            }
        });
    });


    $(document).on('keyup', "#BrLimit", function () {

        //var brlimit = $(this).val();
        var brlimit = $("#BrLimit").val();
        //console.log(brlimit);
        if (brlimit=='') {
            $("#BrLimit").val('');
        }
    });



    $(document).on('click', "#save", function () {
        
        setBranchLimit();
        ValidateBranchLimit();
        if (isValid == true) {
            if (confirm('Do you want to save?')) {
           
                $.ajax({
                    url: '@Url.Action("SaveUpdate", "LimitBranch")',
                    contentType: "application/json;charset=utf-8",
                    data: JSON.stringify({ BranchLimitData }),
                    type: 'POST',
                    dataType: 'json',
                    success: function (datas) {
                        if (datas==0)
                        {
                            alert("Successfully saved.");
                            location.reload();
                        }
                        else {
                            alert("Error.");
                            location.reload();
                        }
                    }
                });
            }
        }
    });
    $(document).on('click', "#update", function () {
        setBranchLimit();
        ValidateBranchLimit();
        if (isValid == true) {
            if (confirm('Do you want to Update?')) {
            
                $.ajax({
                    url: '@Url.Action("SaveUpdate", "LimitBranch")',
                    contentType: "application/json;charset=utf-8",
                    data: JSON.stringify({ BranchLimitData }),
                    type: 'POST',
                    dataType: 'json',
                    success: function (datas) {
                        if (datas==1)
                        {
                            alert("Successfully updated.");
                            location.reload();
                        }
                        else {
                            alert("Error.");
                            location.reload();
                        }
                    }
                });
            }
        }

    });
    $(document).on('click', "#delete", function () {
        var limitID = parseInt($("#LimitID").val());
        if (confirm('Do you want to delete?')){
            $.ajax({
                url: '@Url.Action("DeleteByLimitID", "LimitBranch")',
                contentType: "application/json;charset=utf-8",
                data: JSON.stringify({ limitID: limitID }),
                type: 'POST',
                dataType: 'json',
                success: function (datas) {
                    if (datas == 0) {
                        alert("Successfully Deleted.");
                        location.reload();
                    }
                    else {
                        location.reload();
                    }
                }
            });
        }
    });

    $(document).on('click', '#refresh', function () {
        location.reload();
    });
    function setBranchLimit()
    {
        BranchLimitData.LimitID = ($("#LimitID").val() != "") ? parseInt($("#LimitID").val()) : 0;
        BranchLimitData.BranchCode = $("#BranchCode").val();
        BranchLimitData.BrLimit = ($("#BrLimit").val() != "") ? parseFloat($("#BrLimit").val()) : 0;
    }
    function ValidateBranchLimit() {
        isValid = true;
        if (BranchLimitData.BrLimit == 0) {
            //alert("Select branch.");
            isValid = false;
        } if (BranchLimitData.BranchCode == '') {
            //setError("BranchCode", "Branch is required field");
            isValid = false;
        }


        
    }

    //function setError(name, message) {
    //    //RemoveError();
    //    $('#' + name).after('<div id="error" class="red"><p style="color:red">' + message + '</p></div >');
    //    $('#' + name).css("border", "solid red");
    //}

    //function RemoveError() {

    //    var element = document.getElementById("error");
    //    if (element == null) {

    //    }
    //    else {
    //        element.parentNode.removeChild(element);
    //    }
    //}

    
</script>

}

